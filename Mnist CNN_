{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"executionInfo":{"elapsed":1676,"status":"ok","timestamp":1649833371516,"user":{"displayName":"Akash Singh","userId":"12779687995118795449"},"user_tz":-330},"id":"Ick2IVbELHKG"},"outputs":[],"source":["import numpy as np\n","from tensorflow import keras\n","from tensorflow.keras import layers"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":369,"status":"ok","timestamp":1649833371874,"user":{"displayName":"Akash Singh","userId":"12779687995118795449"},"user_tz":-330},"id":"ciwpt-HTZjuW","outputId":"dd754a09-c61f-41af-cd9a-09a9883940d9"},"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n","11493376/11490434 [==============================] - 0s 0us/step\n","11501568/11490434 [==============================] - 0s 0us/step\n","x_train shape: (60000, 28, 28, 1)\n","60000 train samples\n","10000 test samples\n"]}],"source":["num_classes = 10\n","input_shape = (28, 28, 1)\n","\n","# the data, split between train and test sets\n","(x_train, y_train), (x_test, y_test) = keras.datasets.mnist.load_data()\n","\n","# Scale images to the [0, 1] range\n","x_train = x_train.astype(\"float32\") / 255\n","x_test = x_test.astype(\"float32\") / 255\n","# Make sure images have shape (28, 28, 1)\n","x_train = np.expand_dims(x_train, -1)\n","x_test = np.expand_dims(x_test, -1)\n","print(\"x_train shape:\", x_train.shape)\n","print(x_train.shape[0], \"train samples\")\n","print(x_test.shape[0], \"test samples\")"]},{"cell_type":"code","execution_count":3,"metadata":{"executionInfo":{"elapsed":3,"status":"ok","timestamp":1649833371874,"user":{"displayName":"Akash Singh","userId":"12779687995118795449"},"user_tz":-330},"id":"v94N9gvAZxoM"},"outputs":[],"source":["# convert class vectors to binary class matrices\n","y_train = keras.utils.to_categorical(y_train, num_classes)\n","y_test = keras.utils.to_categorical(y_test, num_classes)"]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":13,"status":"ok","timestamp":1649833373234,"user":{"displayName":"Akash Singh","userId":"12779687995118795449"},"user_tz":-330},"id":"KQb7NqmCZ3i8","outputId":"beb8478a-93da-4f6c-ddc1-d8ac43704bed"},"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," conv2d (Conv2D)             (None, 26, 26, 32)        320       \n","                                                                 \n"," max_pooling2d (MaxPooling2D  (None, 13, 13, 32)       0         \n"," )                                                               \n","                                                                 \n"," conv2d_1 (Conv2D)           (None, 11, 11, 64)        18496     \n","                                                                 \n"," max_pooling2d_1 (MaxPooling  (None, 5, 5, 64)         0         \n"," 2D)                                                             \n","                                                                 \n"," flatten (Flatten)           (None, 1600)              0         \n","                                                                 \n"," dropout (Dropout)           (None, 1600)              0         \n","                                                                 \n"," dense (Dense)               (None, 10)                16010     \n","                                                                 \n","=================================================================\n","Total params: 34,826\n","Trainable params: 34,826\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}],"source":["model = keras.Sequential(\n","    [\n","        keras.Input(shape=input_shape),\n","        layers.Conv2D(32, kernel_size=(3, 3), activation=\"relu\"),\n","        layers.MaxPooling2D(pool_size=(2, 2)),\n","        layers.Conv2D(64, kernel_size=(3, 3), activation=\"relu\"),\n","        layers.MaxPooling2D(pool_size=(2, 2)),\n","        layers.Flatten(),\n","        layers.Dropout(0.5),\n","        layers.Dense(num_classes, activation=\"softmax\"),\n","    ]\n",")\n","\n","model.summary()"]},{"cell_type":"code","execution_count":5,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Oh1aTqURaA7A","executionInfo":{"status":"ok","timestamp":1649834655376,"user_tz":-330,"elapsed":1282146,"user":{"displayName":"Akash Singh","userId":"12779687995118795449"}},"outputId":"3acd8119-bf47-4eee-a645-8298461b2596"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/30\n","500/500 [==============================] - 44s 87ms/step - loss: 0.3390 - accuracy: 0.8950 - val_loss: 0.0820 - val_accuracy: 0.9767\n","Epoch 2/30\n","500/500 [==============================] - 41s 82ms/step - loss: 0.1041 - accuracy: 0.9680 - val_loss: 0.0602 - val_accuracy: 0.9840\n","Epoch 3/30\n","500/500 [==============================] - 41s 81ms/step - loss: 0.0805 - accuracy: 0.9750 - val_loss: 0.0464 - val_accuracy: 0.9880\n","Epoch 4/30\n","500/500 [==============================] - 41s 81ms/step - loss: 0.0681 - accuracy: 0.9791 - val_loss: 0.0429 - val_accuracy: 0.9875\n","Epoch 5/30\n","500/500 [==============================] - 41s 81ms/step - loss: 0.0581 - accuracy: 0.9819 - val_loss: 0.0371 - val_accuracy: 0.9912\n","Epoch 6/30\n","500/500 [==============================] - 41s 81ms/step - loss: 0.0542 - accuracy: 0.9831 - val_loss: 0.0389 - val_accuracy: 0.9892\n","Epoch 7/30\n","500/500 [==============================] - 41s 81ms/step - loss: 0.0488 - accuracy: 0.9843 - val_loss: 0.0331 - val_accuracy: 0.9920\n","Epoch 8/30\n","500/500 [==============================] - 41s 81ms/step - loss: 0.0456 - accuracy: 0.9860 - val_loss: 0.0351 - val_accuracy: 0.9912\n","Epoch 9/30\n","500/500 [==============================] - 40s 80ms/step - loss: 0.0407 - accuracy: 0.9871 - val_loss: 0.0328 - val_accuracy: 0.9913\n","Epoch 10/30\n","500/500 [==============================] - 40s 80ms/step - loss: 0.0408 - accuracy: 0.9869 - val_loss: 0.0299 - val_accuracy: 0.9910\n","Epoch 11/30\n","500/500 [==============================] - 40s 81ms/step - loss: 0.0379 - accuracy: 0.9881 - val_loss: 0.0281 - val_accuracy: 0.9917\n","Epoch 12/30\n","500/500 [==============================] - 41s 81ms/step - loss: 0.0371 - accuracy: 0.9879 - val_loss: 0.0293 - val_accuracy: 0.9925\n","Epoch 13/30\n","500/500 [==============================] - 40s 81ms/step - loss: 0.0344 - accuracy: 0.9889 - val_loss: 0.0261 - val_accuracy: 0.9925\n","Epoch 14/30\n","500/500 [==============================] - 41s 81ms/step - loss: 0.0331 - accuracy: 0.9888 - val_loss: 0.0297 - val_accuracy: 0.9913\n","Epoch 15/30\n","500/500 [==============================] - 41s 81ms/step - loss: 0.0324 - accuracy: 0.9894 - val_loss: 0.0284 - val_accuracy: 0.9922\n","Epoch 16/30\n","500/500 [==============================] - 40s 81ms/step - loss: 0.0310 - accuracy: 0.9899 - val_loss: 0.0296 - val_accuracy: 0.9925\n","Epoch 17/30\n","500/500 [==============================] - 41s 81ms/step - loss: 0.0289 - accuracy: 0.9909 - val_loss: 0.0269 - val_accuracy: 0.9918\n","Epoch 18/30\n","500/500 [==============================] - 41s 82ms/step - loss: 0.0283 - accuracy: 0.9904 - val_loss: 0.0278 - val_accuracy: 0.9927\n","Epoch 19/30\n","500/500 [==============================] - 41s 82ms/step - loss: 0.0282 - accuracy: 0.9912 - val_loss: 0.0286 - val_accuracy: 0.9923\n","Epoch 20/30\n","500/500 [==============================] - 41s 81ms/step - loss: 0.0269 - accuracy: 0.9913 - val_loss: 0.0287 - val_accuracy: 0.9922\n","Epoch 21/30\n","500/500 [==============================] - 41s 82ms/step - loss: 0.0255 - accuracy: 0.9915 - val_loss: 0.0273 - val_accuracy: 0.9928\n","Epoch 22/30\n","500/500 [==============================] - 41s 82ms/step - loss: 0.0242 - accuracy: 0.9920 - val_loss: 0.0319 - val_accuracy: 0.9918\n","Epoch 23/30\n","500/500 [==============================] - 41s 82ms/step - loss: 0.0233 - accuracy: 0.9922 - val_loss: 0.0301 - val_accuracy: 0.9925\n","Epoch 24/30\n","500/500 [==============================] - 41s 82ms/step - loss: 0.0233 - accuracy: 0.9920 - val_loss: 0.0292 - val_accuracy: 0.9928\n","Epoch 25/30\n","500/500 [==============================] - 41s 82ms/step - loss: 0.0236 - accuracy: 0.9920 - val_loss: 0.0273 - val_accuracy: 0.9925\n","Epoch 26/30\n","500/500 [==============================] - 41s 82ms/step - loss: 0.0226 - accuracy: 0.9925 - val_loss: 0.0269 - val_accuracy: 0.9925\n","Epoch 27/30\n","500/500 [==============================] - 41s 82ms/step - loss: 0.0214 - accuracy: 0.9927 - val_loss: 0.0280 - val_accuracy: 0.9935\n","Epoch 28/30\n","500/500 [==============================] - 41s 82ms/step - loss: 0.0191 - accuracy: 0.9935 - val_loss: 0.0300 - val_accuracy: 0.9922\n","Epoch 29/30\n","500/500 [==============================] - 41s 82ms/step - loss: 0.0196 - accuracy: 0.9935 - val_loss: 0.0305 - val_accuracy: 0.9932\n","Epoch 30/30\n","500/500 [==============================] - 41s 82ms/step - loss: 0.0211 - accuracy: 0.9927 - val_loss: 0.0302 - val_accuracy: 0.9928\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7f305076a150>"]},"metadata":{},"execution_count":5}],"source":["batch_size = 108\n","epochs = 30\n","\n","model.compile(loss=\"categorical_crossentropy\", optimizer=\"adam\", metrics=[\"accuracy\"])\n","\n","model.fit(x_train, y_train, batch_size=batch_size, epochs=epochs, validation_split=0.1)"]},{"cell_type":"code","execution_count":6,"metadata":{"id":"AgClJXLqbM0A","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1649834658240,"user_tz":-330,"elapsed":2871,"user":{"displayName":"Akash Singh","userId":"12779687995118795449"}},"outputId":"9da467be-69aa-48c8-f183-590dcce356f7"},"outputs":[{"output_type":"stream","name":"stdout","text":["Test loss: 0.02022702246904373\n","Test accuracy: 0.9936000108718872\n"]}],"source":["score = model.evaluate(x_test, y_test, verbose=0)\n","print(\"Test loss:\", score[0])\n","print(\"Test accuracy:\", score[1])"]}],"metadata":{"accelerator":"GPU","colab":{"name":"Mnist CNN ","provenance":[],"authorship_tag":"ABX9TyMRHAZjst5SKTmocM0yQcCD"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}